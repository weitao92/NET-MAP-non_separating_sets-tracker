import java.util.*;

/**
 * finite abelian group generated by 2 elements.
 * @author weitao92
 *
 */
public class group {
	
	int order;
	ArrayList<element> list;
	
	public group(int a, int b)
	{
		order = a * b;
		list = new ArrayList<element> ();
		
		for(int i = 0; i < a; i++)
		{
			for(int j = 0; j < b; j++)
			{
				element x = new element(a, b, i, j);
				list.add(x);
			}
		}
	}
	
	public group()
	{
		list = new ArrayList<element> ();
		order = 0;
	}
	
	/**
	 * return a new group such as param * current group.
	 * @param a
	 * @return
	 */
	public group operation(int param)
	{
		group newOne = new group();
		
		for(element e : list)
		{
			
			element newElement = e.operation(e, param - 1);			
			
			boolean already = false;
			
			if((newOne.list).contains(newElement))
			{
				already = true;
			}
			
			if(!already)
			{
				(newOne.list).add(newElement);
			}
		}
		
		newOne.order = (newOne.list).size();
		return newOne;
		
	}
	
	/**
	 * determine whether this group is cyclic.
	 * @return
	 */
	public boolean cyclic()
	{
		for(element e : list)
		{
			if(e.order() == order)
			{
				return true;
			}
		}
		
		return false;
	}
	
	public ArrayList<element> reduce(element generator)
	{
		group reduceList = generate(generator);
		ArrayList<element> returnList = new ArrayList<element>();
		for(element e : list)
		{
			if(!reduceList.list.contains(e))
			{
				returnList.add(e);
			}
		}
		return returnList;
	}
	
	/**
	 * generate a sub-group by element e.
	 * @param e
	 * @return
	 */
	public group generate(element e)
	{
		group newOne = new group();
		newOne.order = e.order();
		newOne.list.add(e);
		element temp = e;
		
		for(int i = 1; i < newOne.order; i++)
		{
			temp = temp.operation(e, 1);
			(newOne.list).add(temp);
		}
		
		return newOne;
	}
	
	/**
	 * implement the toString function.
	 */
	public String toString()
	{
		String result = "{";
		
		for(element e : list)
		{
			result += e.toString();
			result += " ";
		}
		
		result += "}";
		return result;
	}
	
	/**
	 * implement the equals method.
	 * @param another
	 * @return
	 */
	public boolean equals(Object obj)
	{
		group another = (group) obj;
		
		if(order != another.order)
		{
			return false;
		}
		else
		{
			for(element e : list)
			{
				if(!another.list.contains(e))
				{
					return false;
				}
			}
			
			return true;
		}
		
	}

}
